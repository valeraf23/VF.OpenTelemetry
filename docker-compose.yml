version: '2.1'
services:

  mysql:
    image: mysql
    container_name: mysql
    command:
      --sql_mode=""
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=test
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE
    ports:
      - '3307:3306'
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
  
  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      timeout: 20s
      retries: 10
  
  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      timeout: 20s
      retries: 10
    ports:
      - "5432:5432"

  otel-collector:
    image: otel/opentelemetry-collector
    command: ["--config=/etc/otel-collector-config.yaml", ""]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml

  otel-agent-net:
    image: otel/opentelemetry-collector-contrib:0.22.0
    command: ["--config=/etc/otel-agent-config-net.yaml", ""]
    ports:
      - 4317:4317
    volumes:
      - ./otel-agent-config-net.yaml:/etc/otel-agent-config-net.yaml
      - ./Logs:/logs

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.12.0
    command:
      - -e
      - --E
      - output.elasticsearch.hosts=["elasticsearch:9200"]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.0
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - 9200:9200
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:7.12.0
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
      
#   metricbeat:
#     container_name: metricbeat
#     user: root #To read the docker socket
#     image: docker.elastic.co/beats/metricbeat:7.11.1
#     logging:
#       options:
#         max-file: "3"
#         max-size: "50m"
#     volumes:
#       #Mount the metricbeat configuration so users can make edits.
#       - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
#       - ./system.yml:/usr/share/metricbeat/system.yml
#       #Mount the modules.d directory into the container. This allows user to potentially make changes to the modules and they will be dynamically loaded.
#       - ./modules.d/:/usr/share/metricbeat/modules.d/
#       #The commented sections below enable Metricbeat to monitor the Docker host rather than the Metricbeat container. These are used by the system module.
#       - /proc:/hostfs/proc:ro
#       - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
#       #Allows us to report on docker from the hosts information.
#       - /var/run/docker.sock:/var/run/docker.sock:ro
#       #We mount the host filesystem so we can report on disk usage with the system module.
#       - /:/hostfs:ro
#     command: metricbeat -e -system.hostfs=/hostfs -strict.perms=false
#     restart: on-failure
# #    environment:
# #      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"


  nkafka-console-app:
    build: 
      context: vf-instrumentation-examples/
      dockerfile: Src/Logging.KafkaConsoleApp/Dockerfile
    environment:
      - producer_topic=console_topic_test
      - consumer_topic=console_topic_test
      - kafka_endpoint=kafka:9092
      - otlp_exporter=http://otel-agent-net:4317/
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./Logs:/logs

  nmaster:
    build: 
      context: vf-instrumentation-examples/
      dockerfile: Src/Logging.Service.Master/Api/Dockerfile
    restart: always  
    ports:
     - '80:80'
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
    volumes:
      - ./Logs:/logs

  nslave1:
    build: 
      context: vf-instrumentation-examples/
      dockerfile: Src/Logging.Service.Slave1/Dockerfile
    restart: always
    depends_on:
      redis:
        condition: service_healthy    
    ports:
      - '8301:80'
     
  nslave2:
    build: 
      context: vf-instrumentation-examples/
      dockerfile: Src/Logging.Service.Slave2/Dockerfile
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - '8302:80'

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.2.1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "nc", "-vz", "kafka", "9092"]
      interval: 2s
      timeout: 3s
      retries: 30
    ports:
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 1048576
  
  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
    ports:
      - "2181:2181"

  mssql:
    image: "mcr.microsoft.com/mssql/server:2019-latest"
    container_name: mssql
    environment:
        SA_PASSWORD: "P@ssword11!"
        ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"     
    expose:  
      - 1433
